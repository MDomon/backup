package com.bookshare.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;

import com.bookshare.dto.MyPageDTO;
import com.bookshare.dto.TweetDTO;
import com.bookshare.util.DBConnector;

public class MyPageDAO {
	private DBConnector dbConnector = new DBConnector();

	private Connection connection = dbConnector.getConnection();

	/**
	 * 商品履歴取得
	 *
	 * @param item_transaction_id
	 * @param user_master_id
	 * @return
	 * @throws SQLException
	 */
	public ArrayList<MyPageDTO> getMyPageUserInfo(String item_transaction_id, String user_master_id) throws SQLException {
		ArrayList<MyPageDTO> myPageDTO = new ArrayList<MyPageDTO>();

		String sql = "SELECT ubit.id, iit.item_name, ubit.total_price, ubit.total_count, ubit.pay, ubit.insert_date FROM user_buy_item_transaction ubit LEFT JOIN item_info_transaction iit ON ubit.item_transaction_id = iit.id where ubit.item_transaction_id  = ? AND ubit.user_master_id  = ? ORDER BY insert_date DESC";

		try {
			PreparedStatement preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setString(1, item_transaction_id);
			preparedStatement.setString(2, user_master_id);

			ResultSet resultSet = preparedStatement.executeQuery();

			while(resultSet.next()) {
				MyPageDTO dto = new MyPageDTO();
				dto.setId(resultSet.getString("id"));
				dto.setItemName(resultSet.getString("item_name"));
				dto.setTotalPrice(resultSet.getString("total_price"));
				dto.setTotalCount(resultSet.getString("total_count"));
				dto.setPayment(resultSet.getString("pay"));
				dto.setInsert_date(resultSet.getString("insert_date"));
				myPageDTO.add(dto);
			}

		} catch(Exception e) {
			e.printStackTrace();
		} finally {
			connection.close();
		}

		return myPageDTO;
	}



	/**
	 * 商品履歴削除
	 *
	 * @param item_transaction_id
	 * @param user_master_id
	 * @return
	 * @throws SQLException
	 */
	public int buyItemHistoryDelete(String item_transaction_id, String user_master_id) throws SQLException {

		String sql = "DELETE FROM user_buy_item_transaction where item_transaction_id  = ? AND user_master_id  = ?";

		PreparedStatement preparedStatement;
		int result =0;
		try {
			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setString(1, item_transaction_id);
			preparedStatement.setString(2, user_master_id);

			result = preparedStatement.executeUpdate();

		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			connection.close();
		}

		return result;
	}


	//つぶやき情報の取得
			public ArrayList<TweetDTO> getTweetInfo(int tweet_master_id) throws SQLException{
				ArrayList<TweetDTO> tweetList = new ArrayList<TweetDTO>();

				String sql = "SELECT * FROM tweet_transaction JOIN user_transaction ON tweet_transaction.tweet_master_id = user_transaction.id WHERE tweet_transaction.tweet_master_id =? ORDER BY tweet_date DESC";

			try {
				PreparedStatement statement = connection.prepareStatement(sql);
				statement.setInt(1, tweet_master_id);

				ResultSet resultSet = statement.executeQuery();

				while(resultSet.next()){
					TweetDTO dto = new TweetDTO();
					dto.setTweet_id(resultSet.getInt("id"));
					dto.setTweet_master_id(resultSet.getInt("tweet_master_id"));
					dto.setTweet_user_name(resultSet.getString("tweet_user_name"));
					dto.setTweet_message(resultSet.getString("tweet_message"));
					dto.setTweet_date(resultSet.getDate("tweet_date"));

					tweetList.add(dto);
				}

			} catch(Exception e) {
				e.printStackTrace();
			} finally {
				connection.close();
			}

				return tweetList;
			}

	//つぶやきを削除
	public int removeTweet(int tweet_master_id) throws SQLException{
		String sql = "DELETE FROM tweet_transaction WHERE tweet_master_id = ?";

		PreparedStatement statement = connection.prepareStatement(sql);
		int result2 = 0;
		try {

				statement.setInt(1, tweet_master_id);

				result2 = statement.executeUpdate();

		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			connection.close();
		}
			return result2;
	}
}
