package com.bookshare.action;

import java.util.Date;
import java.util.Iterator;
import java.util.Map;

import org.apache.struts2.interceptor.SessionAware;

import com.bookshare.dto.BookDTO;
import com.bookshare.dto.MyAccountDTO;
import com.bookshare.dto.TweetDTO;
import com.opensymphony.xwork2.ActionSupport;

public class TweetCreateConfirmAction extends ActionSupport implements SessionAware {

	public Map<String, Object> session;
	private String errorMessage;

	private int tweet_id;
	private int tweet_master_id;
	private String tweet_user_name;
	private String tweet_message;
	private Date tweet_date;

	public String execute() {

		String result = SUCCESS;

		if (!(tweet_message.equals(""))) {
			session.put("tweet_message", tweet_message);
		} else {
			setErrorMessage("つぶやきが未入力です。");
			result = ERROR;
		}

		// マイアカウント情報取得メソッド
				int id = (int) session.get("masterId");
				MyAccountDTO myAccountDTO = myAccountDAO.getMyAccountInfo(id);
				session.put("bookcoin", myAccountDTO.getBookcoin());
				session.put("giveBook", myAccountDTO.getGiveBook());
				session.put("takeBook", myAccountDTO.getTakeBook());

				// GiveBook情報の取得
				giveBookList = giveBookDAO.getGiveBookInfo(id);
				Iterator<BookDTO> iterator4 = giveBookList.iterator();
				if (!(iterator4.hasNext())) {
					takeBookList = null;
				}

				// TakeBook情報の取得
				takeBookList = takeBookDAO.getTakeBookInfo(id);
				Iterator<BookDTO> iterator5 = takeBookList.iterator();
				if (!(iterator5.hasNext())) {
					takeBookList = null;
				}

				/**
				 * ツイート履歴取得メソッド
				 *
				 * @author internous
				 */
				// 商品履歴を削除しない場合
				if (deleteTweet == null) {
					int tweet_master_id = (int) session.get("masterId");
					tweetList = myTweetDAO.getTweetInfo(tweet_master_id);

					Iterator<TweetDTO> iterator = tweetList.iterator();
					if (!(iterator.hasNext())) {
						tweetList = null;
					}

					// 商品履歴を削除する場合
				} else if (deleteTweet.equals("1")) {
					remove2();
				}

				/**
				 * Book履歴取得メソッド
				 *
				 * @author internous
				 */
				// Book履歴を削除しない場合
				if (deleteBook == null) {
					int book_master_id = (int) session.get("masterId");
					bookList = myBookDAO.getBookInfo(book_master_id);

					Iterator<BookDTO> iterator3 = bookList.iterator();
					if (!(iterator3.hasNext())) {
						bookList = null;
					}

					// Book履歴を削除する場合
				} else if (deleteBook.equals("1")) {
					remove4();
				}

				String result = SUCCESS;
				return result;
			}

		return result;

	}

	public int getTweet_id() {
		return tweet_id;
	}

	public void setTweet_id(int tweet_id) {
		this.tweet_id = tweet_id;
	}

	public int getTweet_master_id() {
		return tweet_master_id;
	}

	public void setTweet_master_id(int tweet_master_id) {
		this.tweet_master_id = tweet_master_id;
	}

	public String getTweet_user_name() {
		return tweet_user_name;
	}

	public void setTweet_user_name(String tweet_user_name) {
		this.tweet_user_name = tweet_user_name;
	}

	public String getTweet_message() {
		return tweet_message;
	}

	public void setTweet_message(String tweet_message) {
		this.tweet_message = tweet_message;
	}

	public Date getTweet_date() {
		return tweet_date;
	}

	public void setTweet_date(Date tweet_date) {
		this.tweet_date = tweet_date;
	}

	@Override
	public void setSession(Map<String, Object> session) {
		this.session = session;
	}

	public Map<String, Object> getSession() {
		return session;
	}

	public String getErrorMessage() {
		return errorMessage;
	}

	public void setErrorMessage(String errorMessage) {
		this.errorMessage = errorMessage;
	}

}
