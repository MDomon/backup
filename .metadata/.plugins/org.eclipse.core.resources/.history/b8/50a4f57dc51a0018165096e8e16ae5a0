package com.bookshare.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import com.bookshare.dto.BookDTO;
import com.bookshare.dto.MyAccountDTO;
import com.bookshare.util.DBConnector;
import com.bookshare.util.DateUtil;

public class BookShareDAO {



	private BookDTO bookDTO = new BookDTO();

	private DateUtil dateUtil = new DateUtil();

	private MyAccountDTO my = new MyAccountDTO();

	private MyAccountDTO you = new MyAccountDTO();

	private int totalBookcoin;

	private int totalTakeBook;

	private int totalBookcoin2;

	private int totalGiveBook;


	//売買対象Book情報取得
		public BookDTO getBookInfo(int book_id)throws SQLException{
			DBConnector dbConnector = new DBConnector();
			Connection connection = dbConnector.getConnection();

			String sql ="SELECT * FROM book_transaction WHERE id = ?";

			try{
				PreparedStatement preparedStatement = connection.prepareStatement(sql);
				preparedStatement.setInt(1, book_id);

				ResultSet resultSet = preparedStatement.executeQuery();

				if(resultSet.next()) {
					bookDTO.setBook_id(resultSet.getInt("id"));
					bookDTO.setBook_master_id(resultSet.getInt("book_master_id"));
					bookDTO.setBook_user_name(resultSet.getString("book_user_name"));
					bookDTO.setBook_name(resultSet.getString("book_name"));
					bookDTO.setBook_author_name(resultSet.getString("book_author_name"));
					bookDTO.setBook_infomation(resultSet.getString("book_infomation"));
					bookDTO.setBook_date(resultSet.getDate("book_date"));
				}
			}catch(Exception e){
				e.printStackTrace();
			}
			return bookDTO;
		}

	//Book譲り渡し情報挿入
		public void insertGiveBookInfo(int you_id,String book_user_name,String book_name, String book_author_name,String book_infomation)throws SQLException{
			DBConnector dbConnector = new DBConnector();
			Connection connection = dbConnector.getConnection();

			String sql ="INSERT INTO give_book_transaction(book_master_id,book_user_name,book_name,book_author_name,book_infomation,book_date) VALUES(?,?,?,?,?,?)";

			try{
				PreparedStatement ps = connection.prepareStatement(sql);
				ps.setInt(1, you_id);
				ps.setString(2, book_user_name);
				ps.setString(3, book_name);
				ps.setString(4, book_author_name);
				ps.setString(5, book_infomation);
				ps.setString(6, dateUtil.getDate());

				ps.execute();

			}catch(Exception e) {
				e.printStackTrace();
			}finally{
				connection.close();
			}
		}

	//book譲り受け情報挿入
		public void insertTakeBookInfo(int my_id,String book_user_name,String book_name, String book_author_name,String book_infomation)throws SQLException{
			DBConnector dbConnector = new DBConnector();
			Connection connection = dbConnector.getConnection();

			String sql ="INSERT INTO take_book_transaction(book_master_id,book_user_name,book_name,book_author_name,book_infomation,book_date) VALUES(?,?,?,?,?,?)";

			try{
				PreparedStatement ps = connection.prepareStatement(sql);
				ps.setInt(1, my_id);
				ps.setString(2, book_user_name);
				ps.setString(3, book_name);
				ps.setString(4, book_author_name);
				ps.setString(5, book_infomation);
				ps.setString(6, dateUtil.getDate());

				ps.execute();

			}catch(Exception e) {
				e.printStackTrace();
			}finally{
				connection.close();
			}
		}

	//Book情報削除
		public void deleteBookInfo(int book_id)throws SQLException{
			DBConnector dbConnector = new DBConnector();
			Connection connection = dbConnector.getConnection();

			String sql = "DELETE FROM book_transaction WHERE id = ?";
			try{
				PreparedStatement ps = connection.prepareStatement(sql);
				ps.setInt(1, book_id);

				ps.executeUpdate();

			}catch(Exception e) {
				e.printStackTrace();
			}finally{
				connection.close();
			}
		}

	//自分ユーザー情報取得
		public MyAccountDTO getMyInfo(int my_id)throws SQLException{
			DBConnector dbConnector = new DBConnector();
			Connection connection = dbConnector.getConnection();

			String sql ="SELECT * FROM user_transaction WHERE id = ?";

			try{
				PreparedStatement preparedStatement = connection.prepareStatement(sql);
				preparedStatement.setInt(1, my_id);

				ResultSet resultSet = preparedStatement.executeQuery();

				if(resultSet.next()) {
					my.setBookcoin(resultSet.getInt("bookcoin"));
					my.setTakeBook(resultSet.getInt("takeBook"));

				}
			}catch(Exception e){
				e.printStackTrace();
			}
			return my;
		}

	//相手ユーザー情報取得
		public MyAccountDTO getYouInfo(int you_id)throws SQLException{
			DBConnector dbConnector = new DBConnector();
			Connection connection = dbConnector.getConnection();

			String sql ="SELECT * FROM user_transaction WHERE id = ?";

			try{
				PreparedStatement preparedStatement = connection.prepareStatement(sql);
				preparedStatement.setInt(1, you_id);

				ResultSet resultSet = preparedStatement.executeQuery();

				if(resultSet.next()) {
					my.setBookcoin(resultSet.getInt("bookcoin"));
					my.setGiveBook(resultSet.getInt("giveBook"));

				}
			}catch(Exception e){
				e.printStackTrace();
			}
			return you;
		}

	//自分ユーザー情報更新
		public void updateMyInfo(int my_id, int my_bookcoin, int takeBook)throws SQLException{
			DBConnector dbConnector = new DBConnector();
			Connection connection = dbConnector.getConnection();

			String sql ="UPDATE user_transaction SET bookcoin = ? AND takeBook = ? WHERE id = ?";
			totalBookcoin = my_bookcoin - 1;
			totalTakeBook = takeBook + 1;

			try{
				PreparedStatement ps = connection.prepareStatement(sql);
				ps.setInt(1, totalBookcoin);
				ps.setInt(2, totalTakeBook);
				ps.setInt(3, my_id);

				ps.executeUpdate();

			}catch(Exception e){
				e.printStackTrace();
			}finally{
				connection.close();
			}
		}


	//相手ユーザー情報更新
		public void updateYouInfo(int you_id, int you_bookcoin, int giveBook)throws SQLException{
			DBConnector dbConnector = new DBConnector();
			Connection connection = dbConnector.getConnection();

			String sql ="UPDATE user_transaction SET bookcoin = ? AND giveBook = ? WHERE id = ?";
			totalBookcoin2 = you_bookcoin - 1;
			totalGiveBook = giveBook + 1;

			try{
				PreparedStatement ps = connection.prepareStatement(sql);
				ps.setInt(1, totalBookcoin2);
				ps.setInt(2, totalGiveBook);
				ps.setInt(3, you_id);

				ps.executeUpdate();

			}catch(Exception e){
				e.printStackTrace();
			}finally{
				connection.close();
			}
		}


	public void setBookDTO(BookDTO bookDTO) {
		this.bookDTO = bookDTO;
	}

	public MyAccountDTO getMy() {
		return my;
	}

	public void setMy(MyAccountDTO my) {
		this.my = my;
	}

	public MyAccountDTO getYou() {
		return you;
	}

	public void setYou(MyAccountDTO you) {
		this.you = you;
	}

	public int getTotalBookcoin() {
		return totalBookcoin;
	}

	public void setTotalBookcoin(int totalBookcoin) {
		this.totalBookcoin = totalBookcoin;
	}

	public int getTotalTakeBook() {
		return totalTakeBook;
	}

	public void setTotalTakeBook(int totalTakeBook) {
		this.totalTakeBook = totalTakeBook;
	}

	public int getTotalBookcoin2() {
		return totalBookcoin2;
	}

	public void setTotalBookcoin2(int totalBookcoin2) {
		this.totalBookcoin2 = totalBookcoin2;
	}

	public int getTotalGiveBook() {
		return totalGiveBook;
	}

	public void setTotalGiveBook(int totalGiveBook) {
		this.totalGiveBook = totalGiveBook;
	}
}
